[{"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/reportWebVitals.js":"1","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/App.tsx":"2","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/index.tsx":"3","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/DataTable.tsx":"4","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableTitle.tsx":"5","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/Timestamp.tsx":"6","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/DataTableContainer.tsx":"7","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableRow.tsx":"8","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/Position.tsx":"9","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableCell.tsx":"10","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableHeaderRow.tsx":"11","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableHeaderCell.tsx":"12","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/PriceButton.tsx":"13","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/OrdersFixtures.ts":"14","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/processing/processOrders.ts":"15","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/processing/processPositions.ts":"16","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/ResponseTypes.ts":"17","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/PositionsFixtures.ts":"18"},{"size":362,"mtime":1608439962458,"results":"19","hashOfConfig":"20"},{"size":205,"mtime":1608441146433,"results":"21","hashOfConfig":"22"},{"size":197,"mtime":1608440362527,"results":"23","hashOfConfig":"22"},{"size":1451,"mtime":1608493527074,"results":"24","hashOfConfig":"22"},{"size":97,"mtime":1608441511889,"results":"25","hashOfConfig":"26"},{"size":98,"mtime":1608441501640,"results":"27","hashOfConfig":"26"},{"size":1489,"mtime":1608531351144,"results":"28","hashOfConfig":"22"},{"size":514,"mtime":1608444662980,"results":"29","hashOfConfig":"26"},{"size":325,"mtime":1608507939159,"results":"30","hashOfConfig":"22"},{"size":193,"mtime":1608444573424,"results":"31","hashOfConfig":"26"},{"size":394,"mtime":1608445816652,"results":"32","hashOfConfig":"26"},{"size":158,"mtime":1608445851539,"results":"33","hashOfConfig":"26"},{"size":707,"mtime":1608490054707,"results":"34","hashOfConfig":"22"},{"size":195344,"mtime":1608578440217,"results":"35","hashOfConfig":"22"},{"size":4458,"mtime":1608579640290,"results":"36","hashOfConfig":"22"},{"size":1299,"mtime":1608507725580,"results":"37","hashOfConfig":"22"},{"size":2363,"mtime":1608578605406,"results":"38","hashOfConfig":"22"},{"size":33853,"mtime":1608508036394,"results":"39","hashOfConfig":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1re948i",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"scp10y",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1a3hku6",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/reportWebVitals.js",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/App.tsx",[],["81","82"],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/index.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/DataTable.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableTitle.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/Timestamp.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/DataTableContainer.tsx",["83","84","85"],"import React, { useEffect, useState } from \"react\";\nimport DataTable from \"./statistics/DataTable\";\nimport { SIMPLE_ORDERS } from \"./statistics/OrdersFixtures\";\nimport {\n  FULL_POSITIONS_RESPONSE_1,\n  POSITION,\n} from \"./statistics/PositionsFixtures\";\nimport InstrumentMap from \"./statistics/processing/InterfaceMapping\";\nimport { addRealizedProfits } from \"./statistics/processing/processOrders\";\nimport { processPositions } from \"./statistics/processing/processPositions\";\nimport {\n  RHOrdersResponse,\n  RHPosition,\n  RHPositionsResponse,\n} from \"./statistics/ResponseTypes\";\n\nconst ALL_POSITIONS_MAPPING: InstrumentMap<RHPosition> = {};\nfor (const position of FULL_POSITIONS_RESPONSE_1.results) {\n  ALL_POSITIONS_MAPPING[position.instrument] = position;\n}\n\nfunction DataTableContainer(): JSX.Element {\n  const [ordersFromServer, setOrdersFromServer] = useState<RHOrdersResponse>(\n    SIMPLE_ORDERS\n  );\n\n  const [\n    positionsFromServer,\n    setPositionsFromServer,\n  ] = useState<RHPositionsResponse>(FULL_POSITIONS_RESPONSE_1);\n\n  useEffect(() => {\n    // TODO kedar: cache previous\n    const basePositions = processPositions(positionsFromServer);\n    const positionsWithRealizedProfits = addRealizedProfits(\n      ordersFromServer,\n      basePositions\n    );\n    // const positionsWithProfits = addUnrealizedProfits(positionsFromServer, )\n  }, [positionsFromServer, ordersFromServer]);\n\n  return <DataTable positions={[POSITION, POSITION]} />;\n}\n\nexport default DataTableContainer;\n","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableRow.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/Position.tsx",["86"],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableCell.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableHeaderRow.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/TableHeaderCell.tsx",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/PriceButton.tsx",[],["87","88"],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/OrdersFixtures.ts",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/processing/processOrders.ts",["89"],"import { TableColumn } from \"../DataTable\";\nimport { RHOrdersResponse, RHPosition, url, Response } from \"../ResponseTypes\";\nimport InstrumentMap from \"./InterfaceMapping\";\nimport { BasePosition } from \"./processPositions\";\n\n// TODO kedar: rename file\n\ninterface OrderData {\n  instrument: url;\n  state: \"confirmed\" | \"filled\" | \"cancelled\";\n  side: \"buy\" | \"sell\";\n  executed_notional: {\n    amount: string;\n    currency_code: string;\n    currency_id: string;\n  };\n  cumulative_quantity: string;\n  created_at: Date;\n}\n\ninterface BasePositionWithRealizedProfits extends BasePosition {\n  [TableColumn.REALIZED_PROFIT]: number;\n}\n\ninterface BasePositionWithUnrealizedProfits extends BasePosition {\n  [TableColumn.UNREALIZED_PROFIT]: number;\n}\n\nexport function addRealizedProfits(\n  ordersResponse: RHOrdersResponse,\n  basePositions: InstrumentMap<BasePosition> // TODO kedar: extract into type\n): InstrumentMap<BasePositionWithRealizedProfits> {\n  // TODO kedar: extract all orders by iterating through the paginated results\n  const { results } = ordersResponse;\n\n  // Put in chronological order\n  const orders = results.reverse();\n\n  // Separate into buy / sell orders.\n  const instrumentToOrders: InstrumentMap<{\n    buyOrders: Array<OrderData>;\n    sellOrders: Array<OrderData>;\n  }> = {};\n\n  for (const {\n    instrument,\n    state,\n    side,\n    executed_notional,\n    cumulative_quantity,\n    created_at,\n  } of orders) {\n    if (state !== \"filled\") {\n      continue;\n    }\n    if (executed_notional == null) {\n      console.log(\"Found a non-cancelled order with price == null.\");\n      debugger;\n      continue;\n    }\n\n    const orderData: OrderData = {\n      instrument,\n      state,\n      side,\n      executed_notional,\n      cumulative_quantity,\n      created_at: new Date(created_at),\n    };\n\n    if (!instrumentToOrders.hasOwnProperty(instrument)) {\n      instrumentToOrders[instrument] = { buyOrders: [], sellOrders: [] };\n    }\n    if (side === \"buy\") {\n      instrumentToOrders[instrument].buyOrders.push(orderData);\n    } else {\n      instrumentToOrders[instrument].sellOrders.push(orderData);\n    }\n  }\n\n  const basePositionsWithRealizedProfits: InstrumentMap<BasePositionWithRealizedProfits> = {};\n\n  // Remove all the buy orders that occur after the last sell order\n  for (const [instrument, { buyOrders, sellOrders }] of Object.entries(\n    instrumentToOrders\n  )) {\n    const lastSell = sellOrders[sellOrders.length - 1];\n    // Pop off buy order if after last sell date\n    while (\n      buyOrders.length > 0 &&\n      buyOrders[buyOrders.length - 1].created_at > lastSell.created_at\n    ) {\n      buyOrders.pop();\n    }\n    instrumentToOrders[instrument].buyOrders = buyOrders;\n\n    // Calculate average buy / sell prices of all the equity that was sold\n    let sumCost = 0;\n    let sumQuantityBought = 0;\n    buyOrders.forEach((orderData: OrderData) => {\n      sumCost += parseFloat(orderData.executed_notional.amount);\n      sumQuantityBought += parseFloat(orderData.cumulative_quantity);\n    });\n\n    let averageBuyPrice = sumCost / sumQuantityBought;\n\n    let sumProfit = 0;\n    let sumQuantitySold = 0;\n    sellOrders.forEach((orderData: OrderData) => {\n      sumProfit += parseFloat(orderData.executed_notional.amount);\n      sumQuantitySold += parseFloat(orderData.cumulative_quantity);\n    });\n\n    let averageSellPrice = sumProfit / sumQuantitySold;\n\n    // Copy base position with realized profits added\n    basePositionsWithRealizedProfits[instrument] = {\n      ...basePositions[instrument],\n      [TableColumn.REALIZED_PROFIT]:\n        (averageSellPrice - averageBuyPrice) * sumQuantitySold,\n    };\n  }\n\n  return basePositionsWithRealizedProfits;\n}\n\nexport function addUnrealizedProfits(\n  positionsFromServer: InstrumentMap<RHPosition>,\n  basePositions: InstrumentMap<BasePosition>,\n  currentPrices: InstrumentMap<number>\n): InstrumentMap<BasePositionWithUnrealizedProfits> {\n  const basePositionWithUnrealizedProfits: InstrumentMap<BasePositionWithUnrealizedProfits> = {};\n  for (const instrument of Object.keys(basePositions)) {\n    const {\n      average_buy_price: averageBuyPrice,\n      quantity,\n    } = positionsFromServer[instrument];\n\n    basePositionWithUnrealizedProfits[instrument] = {\n      ...basePositions[instrument],\n      [TableColumn.UNREALIZED_PROFIT]:\n        (currentPrices[instrument] - parseFloat(averageBuyPrice)) *\n        parseFloat(quantity),\n    };\n  }\n\n  return basePositionWithUnrealizedProfits;\n}\n","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/processing/processPositions.ts",["90"],"import { RHPosition, RHPositionsResponse, url } from \"../ResponseTypes\";\nimport { TableColumn } from \"../DataTable\";\n\nexport interface BasePosition {\n  [TableColumn.AVERAGE_COST]: string;\n  [TableColumn.QUANTITY]: number;\n  [TableColumn.TICKER]: string;\n  instrument: url;\n  // These will be populated later.\n  [TableColumn.DIVIDEND]?: number;\n  [TableColumn.UNREALIZED_PROFIT]?: number;\n  [TableColumn.REALIZED_PROFIT]?: number;\n}\n\n/**\n * Creates a mapping from a a position's instrument url to the base position itself.\n * @param positionsResponse - full RHPositionsResponse from Robinhood's server.\n */\nexport function processPositions(\n  positionsResponse: RHPositionsResponse\n): { [instrument: string]: BasePosition } {\n  // TODO kedar: extract all positions by iterating over paginated results\n\n  const { results } = positionsResponse;\n\n  const instrumentToBasePosition: { [instrument: string]: BasePosition } = {};\n\n  for (const position of results) {\n    instrumentToBasePosition[position.instrument] = {\n      [TableColumn.AVERAGE_COST]: position.average_buy_price,\n      [TableColumn.QUANTITY]: parseFloat(position.quantity),\n      [TableColumn.TICKER]: \"MSFT\", // TODO kedar: Extract from instrument\n      instrument: position.instrument,\n    };\n  }\n\n  return instrumentToBasePosition;\n}\n","/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/ResponseTypes.ts",[],"/Users/kedar/dev/RobinReturnsTS/robin-returns/src/statistics/PositionsFixtures.ts",[],{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":23,"column":28,"nodeType":"97","messageId":"98","endLine":23,"endColumn":47},{"ruleId":"95","severity":1,"message":"99","line":29,"column":5,"nodeType":"97","messageId":"98","endLine":29,"endColumn":27},{"ruleId":"95","severity":1,"message":"100","line":35,"column":11,"nodeType":"97","messageId":"98","endLine":35,"endColumn":39},{"ruleId":"95","severity":1,"message":"101","line":2,"column":10,"nodeType":"97","messageId":"98","endLine":2,"endColumn":35},{"ruleId":"91","replacedBy":"102"},{"ruleId":"93","replacedBy":"103"},{"ruleId":"95","severity":1,"message":"104","line":2,"column":45,"nodeType":"97","messageId":"98","endLine":2,"endColumn":53},{"ruleId":"95","severity":1,"message":"105","line":1,"column":10,"nodeType":"97","messageId":"98","endLine":1,"endColumn":20},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"@typescript-eslint/no-unused-vars","'setOrdersFromServer' is assigned a value but never used.","Identifier","unusedVar","'setPositionsFromServer' is assigned a value but never used.","'positionsWithRealizedProfits' is assigned a value but never used.","'SIMPLE_POSITIONS_RESPONSE' is defined but never used.",["106"],["107"],"'Response' is defined but never used.","'RHPosition' is defined but never used.","no-global-assign","no-unsafe-negation"]